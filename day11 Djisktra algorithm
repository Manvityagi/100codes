#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int findMinDV(int *distance, bool *visited, int V)
{
  int minDV = -1;
  for(int i = 0; i < V; i++)
  {
    if(!visited[i] && (minDV == -1 || distance[i] < distance[minDV]))
      minDV = i;
  }
  return minDV;
}
void dijkstra(int** adjMatrix, int V)
{
  bool *visited = new bool[V]();
  int *distance = new int[V];
  for(int i = 0; i < V; i++)
    distance[i] = INT_MAX;
    distance[0] = 0; 
  
  for(int i = 0; i < V; i++)
  {
    //find minDistanceVertex
    int minDistVer = findMinDV(distance,visited,V);
    visited[minDistVer] = true;
    //explore unvisited neighbours
    for(int j = 0; j < V; j++)
    {
      if(adjMatrix[minDistVer][j] != 0 && !visited[j])
      {
       if(adjMatrix[minDistVer][j] + distance[minDistVer] < distance[j])
       {
         distance[j] = adjMatrix[minDistVer][j] + distance[minDistVer];
       }
      }
    }
  }
  //printing
  for(int i = 0; i < V; i++)
  {
    cout<<i<<" "<<distance[i]<<endl;
  }
  
}

int main()
{
  int V, E, tempX, tempY;
  cin >> V >> E;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to Print the output yourself
	 
  */
  //forming adjMatrix
  int** adjMatrix = new int*[V];
  for(int i = 0; i < V; i++)
  {
    adjMatrix[i] = new int[V];
    for(int j = 0; j < V; j++)
      adjMatrix[i][j] = 0; 
  }
  
  for(int i = 0; i < E; i++)
  {
    int s,d,w;
    cin>>s>>d>>w;
    adjMatrix[s][d] = w;
    adjMatrix[d][s] = w;
  }
  dijkstra(adjMatrix,V);
  
  for(int i = 0; i < V; i++)
    delete [] adjMatrix[i];
  
  delete [] adjMatrix;
  
  return 0;
}
